9:00 ~ 

람다식 구현

1. 익명함수 : 이름없이 사용(1번 필요)
	 - 다른 메소드 안에 사용(내부함수)

2. 인터페이스(생성자 만들 수 없음 -> new x, 본체 없음, {} x )

3. 인터페이스에서 이름만 빌려 쓰고 내용은 별도로 작성

Java : 객체 지향

Lamda : 객체 지향이지만 함수 지향도 사용 가능(Javascript 익명함수)

public String str() {} - java

1. function str() {} - Javascript
2. const result = function() {}
3. const result = () => {} - 화살표 함수

lamda
LamdaEx.java

---------------------------------------------------------

10:00 ~ 10:50

LamdaEx2.java

LamdaEx3.java

LamdaEx4.java

---------------------------------------------------------

11:00 ~ 11:50

LamdaEx5.java

문자열 연결 : +
concat(연결1, 연결2, 연결자)

LamdaEx6.java

--------------------------------------------------------

12:00 ~ 12:50

ul li
ol li
dl dt

--------------------------------------------------------

2:00 ~ 2:50

02_table.html

strong, b 둘다 비슷하지만 웹표준 등등 고려했을때 strong 사용





